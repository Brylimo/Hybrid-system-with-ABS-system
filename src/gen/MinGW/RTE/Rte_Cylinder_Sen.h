/** @file     Rte_Cylinder_Sen.h
  *
  * @brief    Application header file
  *
  * @note     AUTOMATICALLY GENERATED FILE! DO NOT EDIT!
  *
  * @note     Generated by ETAS GmbH  RTA-RTE v5.10.0  (R4.0 backend version: v7.10.4 (Build 52732))
  */

#ifndef RTE_CYLINDER_SEN_H
#define RTE_CYLINDER_SEN_H

#ifndef RTE_CORE
#ifdef RTE_APPLICATION_HEADER_FILE
#error Multiple application header files included.
#endif /* RTE_APPLICATION_HEADER_FILE */
#define RTE_APPLICATION_HEADER_FILE
#endif /* RTE_CORE */

/*******************************************************
 ***
 *** Includes
 ***
 *******************************************************/

#include "Rte.h"
#include "Rte_Intl.h"
#include "Rte_Cylinder_Sen_Type.h"

#include "Rte_DataHandleType.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#if defined(RTE_RUNNABLEAPI_RE_Cylinder_Sen)
   /* Do nothing for this and all elif clauses below (rte_sws_2751) */
#else
   /* None of above defined so define value including all APIs (rte_sws_2751) */
   #define RTE_PRV_ALL_API
#endif

/*******************************************************
 ***
 *** Constants
 ***
 *******************************************************/


/*******************************************************
 ***
 *** Public Types
 ***
 *******************************************************/

/* BEGIN: SWC types (core visible) */
struct Rte_CDS_Cylinder_Sen {
   uint8 _dummy;
};
typedef struct Rte_CDS_Cylinder_Sen Rte_CDS_Cylinder_Sen;
/* END: SWC types (core visible) */

/*******************************************************
 ***
 *** Private Types
 ***
 *******************************************************/

/* BEGIN: SWC types (private) */
/* END: SWC types (private) */

/*******************************************************
 ***
 *** Instance Declarations
 ***
 *******************************************************/

#define RTE_START_SEC_CONST_UNSPECIFIED
#include "Rte_MemMap.h" /*lint !e537 permit multiple inclusion */
extern CONST(struct Rte_CDS_Cylinder_Sen, RTE_CONST) Rte_Inst_Cylinder_Sen;
#define RTE_STOP_SEC_CONST_UNSPECIFIED
#include "Rte_MemMap.h" /*lint !e537 permit multiple inclusion */


#ifndef RTE_CORE
typedef CONSTP2CONST(struct Rte_CDS_Cylinder_Sen, AUTOMATIC, RTE_CONST) Rte_Instance;
#endif /* RTE_CORE */

/*******************************************************
 ***
 *** API Mapping macros
 ***
 *******************************************************/

/* API Mapping Macros */
#ifndef RTE_CORE

#define RTE_START_SEC_CODE
#include "Rte_MemMap.h" /*lint !e537 permit multiple inclusion */
FUNC(Std_ReturnType, RTE_CODE) Rte_Call_Cylinder_Sen_Rport_get_cylinder_Status(CONSTP2VAR(sint16, AUTOMATIC, RTE_APPL_DATA) temperature,
                                                                               CONSTP2VAR(sint16, AUTOMATIC, RTE_APPL_DATA) pressure);
#define RTE_STOP_SEC_CODE
#include "Rte_MemMap.h" /*lint !e537 permit multiple inclusion */
#define RTE_START_SEC_VAR_CLEARED_32
#include "Rte_MemMap.h" /*lint !e537 permit multiple inclusion */
extern VAR(float32, RTE_DATA) Rte_Rx_000015_pressure;
#define RTE_STOP_SEC_VAR_CLEARED_32
#include "Rte_MemMap.h" /*lint !e537 permit multiple inclusion */
#define RTE_START_SEC_VAR_CLEARED_32
#include "Rte_MemMap.h" /*lint !e537 permit multiple inclusion */
extern VAR(float32, RTE_DATA) Rte_Rx_000016_temperature;
#define RTE_STOP_SEC_VAR_CLEARED_32
#include "Rte_MemMap.h" /*lint !e537 permit multiple inclusion */
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_Cylinder_Sen)
#define Rte_Call_Rport_get_cylinder_Status( temperature, pressure ) (Rte_Call_Cylinder_Sen_Rport_get_cylinder_Status(temperature, pressure))
#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_Cylinder_Sen)
/* Inline Write optimization; Rte_Write_Pport_pressure to direct write */
#define Rte_Write_Pport_pressure( data ) ( (Rte_Rx_000015_pressure = data), RTE_E_OK )
#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_Cylinder_Sen)
/* Inline Write optimization; Rte_Write_Pport_temperature to direct write */
#define Rte_Write_Pport_temperature( data ) ( (Rte_Rx_000016_temperature = data), RTE_E_OK )
#endif

#endif /* RTE_CORE */

/*******************************************************
 ***
 *** RE Prototypes
 ***
 *******************************************************/

#define Cylinder_Sen_START_SEC_CODE
#include "Cylinder_Sen_MemMap.h" /*lint !e537 permit multiple inclusion */
FUNC(void, Cylinder_Sen_CODE) RunnableEntity_0_func(void);
#define Cylinder_Sen_STOP_SEC_CODE
#include "Cylinder_Sen_MemMap.h" /*lint !e537 permit multiple inclusion */

/* Initial values for data element prototypes */

#ifdef __cplusplus
} /* extern C */
#endif /* __cplusplus */

#endif /* !RTE_CYLINDER_SEN_H */
